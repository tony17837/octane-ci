#!/usr/bin/env bash
## Build the codebase via composer and npm
##
## Usage: fin make

# This runs within the CLI container, so all tools are available.
#: exec_target = cli

set -e

# Init the tools like npm within the cli container
if [ -e ~/.profile ]; then
  source ~/.profile
fi

# Parse comment line arguments
CONFIRM=''
while [[ $# -gt 0 ]]; do
  case $1 in
    -y)
    CONFIRM='-y'
    shift # past argument
    ;;
  esac
done

DO_COMPOSER=1
if [ -z $CONFIRM ]; then
  read -p "Do you want to update Composer? [y]/n "
  if [[ $REPLY =~ ^[Yy]$ || -z $REPLY ]]; then
    DO_COMPOSER=1
  else
    DO_COMPOSER=0
  fi
fi

if [[ $DO_COMPOSER -eq 1 ]]; then
  printf "$INFO_SLUG Installing composer dependencies...\n"
  # Uncomment this to continue build if patch application fails. (And comment out the line below.)
  # This should only be done for debugging. If patches from dependencies fail to apply, they
  # can be skipped using the 'patches-ignore' functionality documented here:
  # https://github.com/cweagans/composer-patches#ignoring-patches
  # COMPOSER_PROCESS_TIMEOUT=2000 COMPOSER_EXIT_ON_PATCH_FAILURE=0 composer install --ansi --no-suggest
  COMPOSER_MEMORY_LIMIT=-1 COMPOSER_PROCESS_TIMEOUT=5000 composer install --ansi --no-suggest
fi

# Build the theme if it exists.
if [[ -e "${THEME_PATH}/package.json" ]]; then
  DO_THEME=1
  if [ -z $CONFIRM ]; then
    read -p "Do you want to re-build Theme? [y]/n "
    if [[ $REPLY =~ ^[Yy]$ || -z $REPLY ]]; then
      DO_THEME=1
    else
      DO_THEME=0
    fi
  fi

  if [[ $DO_THEME -eq 1 ]]; then
    printf "$INFO_SLUG Rebuilding theme...\n"
    cd ${THEME_PATH}
    npm install
    npm run build:drupal
  fi
fi

